package com.ysmjjsy.goya.cxfdemo.webservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.5.2
 * 2022-05-08T01:12:06.470+08:00
 * Generated source version: 3.5.2
 *
 */
@WebServiceClient(name = "OrganizationRegistrationServer",
                  wsdlLocation = "file:/Users/chenjie/IdeaProjects/cxfDemo/src/main/resources/rhin_OrganizationRegistration.wsdl",
                  targetNamespace = "http://www.chiss.org.cn/rhin/2015")
public class OrganizationRegistrationServer extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.chiss.org.cn/rhin/2015", "OrganizationRegistrationServer");
    public final static QName SubscriptionManagerPort = new QName("http://www.chiss.org.cn/rhin/2015", "SubscriptionManagerPort");
    public final static QName NotificationProducerPort = new QName("http://www.chiss.org.cn/rhin/2015", "NotificationProducerPort");
    public final static QName OrganizationProviderPort = new QName("http://www.chiss.org.cn/rhin/2015", "OrganizationProviderPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/chenjie/IdeaProjects/cxfDemo/src/main/resources/rhin_OrganizationRegistration.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OrganizationRegistrationServer.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/chenjie/IdeaProjects/cxfDemo/src/main/resources/rhin_OrganizationRegistration.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OrganizationRegistrationServer(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OrganizationRegistrationServer(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OrganizationRegistrationServer() {
        super(WSDL_LOCATION, SERVICE);
    }

    public OrganizationRegistrationServer(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public OrganizationRegistrationServer(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public OrganizationRegistrationServer(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns SubscriptionManager
     */
    @WebEndpoint(name = "SubscriptionManagerPort")
    public SubscriptionManager getSubscriptionManagerPort() {
        return super.getPort(SubscriptionManagerPort, SubscriptionManager.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SubscriptionManager
     */
    @WebEndpoint(name = "SubscriptionManagerPort")
    public SubscriptionManager getSubscriptionManagerPort(WebServiceFeature... features) {
        return super.getPort(SubscriptionManagerPort, SubscriptionManager.class, features);
    }


    /**
     *
     * @return
     *     returns NotificationProducer
     */
    @WebEndpoint(name = "NotificationProducerPort")
    public NotificationProducer getNotificationProducerPort() {
        return super.getPort(NotificationProducerPort, NotificationProducer.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NotificationProducer
     */
    @WebEndpoint(name = "NotificationProducerPort")
    public NotificationProducer getNotificationProducerPort(WebServiceFeature... features) {
        return super.getPort(NotificationProducerPort, NotificationProducer.class, features);
    }


    /**
     *
     * @return
     *     returns OrganizationProvider
     */
    @WebEndpoint(name = "OrganizationProviderPort")
    public OrganizationProvider getOrganizationProviderPort() {
        return super.getPort(OrganizationProviderPort, OrganizationProvider.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OrganizationProvider
     */
    @WebEndpoint(name = "OrganizationProviderPort")
    public OrganizationProvider getOrganizationProviderPort(WebServiceFeature... features) {
        return super.getPort(OrganizationProviderPort, OrganizationProvider.class, features);
    }

}
